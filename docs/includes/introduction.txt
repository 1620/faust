**Simple**
    Faust is just Python, and thanks to the new asynchronous generators
    first introduced in Python 3.6, it blends into your existing Python code.

    Also, since it's using the new :mod:`asyncio`, it is very fast
    and can run other network services in the same process: web servers,
    web sockets, etc.

    Here's one of the easier applications you can make::

        import faust

        class Greeting(faust.Record):
            from_name: str
            to_name: str

        app = faust.App('hello-app', broker='kafka://localhost')
        topic = app.topic('hello-topic', value_type=Greeting)

        @app.agent(topic)
        async def hello(greetings):
            async for greeting in greetings:
                print(f'Hello from {greeting.from_name} to {greeting.to_name}')

        @app.timer(interval=1.0)
        async def example_sender(app):
            await hello.send(
                value=Greeting(from_name='Faust', to_name='you'),
            )

        if __name__ == '__main__':
            app.main()

    You're probably a bit intimidated by the `async` and `await` keywords,
    but you don't need to have used :mod:`asyncio` from before
    Faust: just mimic the examples, and you'll be fine.

    The example application starts two tasks: one is processing a stream,
    the other is a background thread sending events to that stream.
    In a real-life application, your system will publish
    events to Kafka topics that your processors can consume from,
    and the background thread is only needed to feed data into our
    example.

**Highly Available**
    Faust is highly available and can survive network problems and server
    crashes.  In the case of node failure, it can automatically recover,
    and tables have standby nodes that will take over.

**Distributed**
    Start more instances of your application as needed.

**Fast**
    A single-core Faust worker instance can already process tens of thousands
    of events every second, in some cases much more, and we are reasonably
    confident that throughput will increase once we can support a more
    optimized Kafka client.

**Use your favorite libraries**
    If you can use Python, you can use Faust!
    Faust is just Python, and a stream is just an ``async for`` expression.
    Can you use Python? You can use Faustkkkkk, you already know how to use Faust.
    It works with your favorite Python libraries like Django, Flask,
    SQLAlchemy, NTLK, NumPy, Scikit, TensorFlow, etc.
